" XDG Base Directory {{{

if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif
if empty($XDG_STATE_HOME)  | let $XDG_STATE_HOME  = $HOME."/.local/state" | endif

if !has('nvim')
  set runtimepath^=$XDG_CONFIG_HOME/vim
  set runtimepath+=$XDG_DATA_HOME/vim
  set runtimepath+=$XDG_CONFIG_HOME/vim/after

  set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
  set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

  set backupdir=$XDG_STATE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
  set directory=$XDG_STATE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
  set viewdir=$XDG_STATE_HOME/vim/view     | call mkdir(&viewdir,   'p', 0700)
  set undodir=$XDG_STATE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)
  set viminfofile=$XDG_STATE_HOME/vim/viminfo
endif

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)
call mkdir($XDG_STATE_HOME."/vim", 'p', 0700)

" }}}

set nocompatible
set backup undofile
filetype plugin indent on
colorscheme minimal

"   startup {{{1

if $VIM_TERMINAL  " then don't nest
  exec '!printf "\033]51;[\"drop\", \"%:p\"]\007"' | quit!
endif

" Open file at the last known position
autocmd BufReadPost * if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit' | exec "norm! g`\"" | endif

"   syntax {{{1

syntax enable
autocmd FileType *
      \ if has('nvim') | exec 'lua vim.treesitter.stop()' | endif |
      \ silent! setlocal syntax=OFF
autocmd FileType * call matchadd("Todo", "TODO")

"   search {{{1

set hlsearch
set ignorecase
set incsearch
set smartcase

"   mouse {{{1

set mouse=a
set mousemodel=popup_setpos
silent! set ttymouse=sgr

"   listchars {{{1

set list
set listchars=tab:<\ >,trail:_
set listchars+=extends:>,precedes:<
hi! ListCharsTabs ctermfg=235
autocmd VimEnter,WinNew * call matchadd("ListCharsTabs", '\t')

"   window title {{{1

set title
set titlestring=
set titlestring+=%t%(\ %M%)%(\ (%{expand(\"%:p:~:.:h\")}/)%)
let &titlestring .= ' | '.trim(system('id -un')).'@'.hostname().":%{substitute(getcwd(),$HOME,'~','')}"

"   completion {{{1

set complete+=kspell
set completeopt=menuone,noinsert,noselect
set omnifunc=syntaxcomplete#Complete
set pumheight=20

inoremap <expr> <C-o> pumvisible() ? "\<C-n>" : "\<C-o>"

"   command line {{{1

set showcmd
set wildmenu wildmode=full wildoptions=
cnoremap <C-h> <C-w>

"   wrap {{{1

set nowrap
set linebreak
set breakindent
let &showbreak = "↳  "

"   status/tab line {{{1

set showtabline=2
set tabline=%!utils#lines#TabLine()

set laststatus=2
set statusline=%!utils#lines#StatusLine()
sil! autocmd TerminalOpen * setl stl=\ %f

if join(argv()) =~ '.*_LOCAL_.*_BASE_.*_REMOTE_.*'
  autocmd BufReadPost  *_LOCAL_*   setl stl=\ LOCAL
  autocmd BufReadPost  *_BASE_*    setl stl=\ BASE
  autocmd BufReadPost  *_REMOTE_*  setl stl=\ REMOTE
endif

"   cscope {{{1

if executable('cscope') || executable('gtags-cscope')
  if has('cscope')
    set cscopetag
    set cscopetagorder=0
    set cscopepathcomp=2
    set cscopequickfix=a-,c-,d-,e-,f-,g-,i-,s-,t-
  endif
  autocmd VimEnter * call utils#cscope#init()
endif

"   UI misc {{{1

set colorcolumn=+1
set fillchars+=vert:│
set number
set shortmess+=I shortmess-=S
set signcolumn=yes
set splitbelow splitright
set virtualedit=block
set visualbell t_vb=

nnoremap <C-l> :nohlsearch<C-r>=has('diff')?'<bar>diffupdate':''<CR><CR><C-l>
nnoremap <F3> <Cmd>set cursorline! cursorcolumn!<CR>

"   diff {{{1

set diffopt=internal,filler,closeoff,indent-heuristic,algorithm:histogram
let g:diff_translations = 0

"   spelling {{{1

set spellsuggest=double,5
com! -nargs=?  Spelling  if empty("<args>") | setl spell! | else | setl spell spelllang=<args> | endif

"   motion {{{1

set scrolloff=5

nnoremap ' `

noremap j gj
noremap k gk

if !has('nvim')
  nnoremap <expr> <C-e> utils#misc#scroll_cursor_popup(v:count1) ? "<Esc>" : "<C-e>"
  nnoremap <expr> <C-y> utils#misc#scroll_cursor_popup(-v:count1) ? "<Esc>" : "<C-y>"
endif

"   folds {{{1

set foldcolumn=2
set foldmethod=indent
set foldtext=utils#texts#FoldText()
set nofoldenable
autocmd BufReadPost * if line('$') > winheight(0) | setlocal fen | endif

"   formatting {{{1

set backspace=indent,eol,start
set cindent
set expandtab
set shiftround
set shiftwidth=0   " If 0, then uses value of 'tabstop'
set softtabstop=-1 " If negative, then uses 'shiftwidth' (which can use 'tabstop')
set tabstop=4
set textwidth=80

command! -nargs=1  SetFormatProg
      \ exec {prg -> 'let [ &l:fp, &l:fex ] = [ "'.prg.' 2> /dev/null", "" ]'}(<args>)

nnoremap <Leader>= gg=G``
nnoremap <Leader>q m"gggqG`"

autocmd BufWinEnter * set fo-=c fo-=r fo-=o " Disable continuation of comments to the next line
autocmd BufWinEnter * set formatoptions+=j  " Remove a comment leader when joining lines
autocmd BufWinEnter * set formatoptions+=l  " Don't break a line after a one-letter word
autocmd BufWinEnter * set formatoptions+=n  " Recognize numbered lists
autocmd BufWinEnter * set formatoptions-=q  " Don't format comments
autocmd BufWinEnter * set formatoptions-=t  " Don't autowrap text using 'textwidth'

"   ~ {{{1

set secure noexrc

set quickfixtextfunc=utils#texts#QuickFixTextFunc

set modeline nomodelineexpr
set sessionoptions=blank,buffers,folds,tabpages,winsize
set ttimeoutlen=10

set path=**,./
set tags+=.tags/tags;

set hidden
set switchbuf=usetab

com! -range=%  Sort     normal! :<line1>,<line2>sort i<CR>
com! -range    VisSort  sil! keepj <line1>,<line2>call utils#misc#VisSort()

com! -nargs=+  FillLine  exec {str,r -> "norm! a".repeat(str, (r-col(".")+1)/len(str))}(<f-args>, &tw)

set grepprg=grep\ -n

set makeprg=Make
nnoremap <F8> <Cmd>hor term<CR>

nnoremap L <Cmd>call inputsecret("No LSP server running for this buffer ")<CR>

nnoremap <Leader>r :<C-u>%s/\C\<<C-r><C-w>\>/<C-r><C-w>/g<Left><Left>

nnoremap <expr> Q {r ->
      \   ':let @'.r.' = "'
      \     . '<C-r><C-r>='
      \       . 'substitute(getreg('. "'".r."'" .'),'
      \       .             "'\"', '\\\\\"', 'g')"
      \     . '<CR>'
      \   .'"'
      \ }(nr2char(getchar()))

map gh <nop>

augroup VISUALBLOCK_NOSTARTOFLINE
  autocmd!
  silent! exec "autocmd ModeChanged *:\<C-v> let g:sol_old = &sol | set nosol"
  silent! exec "autocmd ModeChanged \<C-v>:* let &startofline = g:sol_old"
augroup END

" Undo if filter shell command returned an error
autocmd ShellFilterPost * if v:shell_error | undo | endif

" Don't automatically copy anything to system clipboard
set clipboard=

" }}}1

"   packadd {{{

sil! packadd! cfilter
sil! packadd! editorconfig
sil! packadd! matchit
sil! packadd! termdebug

if !has('nvim')
  sil! packadd! vim-lsp
  sil! packadd! vim-lsp-ale
endif

source $VIMRUNTIME/ftplugin/man.vim

" }}}

"   ALE {{{1

let g:ale_disable_lsp = 1
let g:ale_echo_msg_format = '[%linter%]: %s'
let g:ale_set_signs = 0
let g:ale_use_neovim_diagnostics_api = 0
let g:ale_virtualtext_cursor = 0
let g:lsp_ale_diagnostics_severity = 'information'

hi! ALEInfo NONE ctermfg=15 ctermbg=4
hi! link ALEError   Error
hi! link ALEWarning WarningMsg

"   Surround {{{1

let g:surround_no_mappings = 1

xmap s  <Plug>VSurround
nmap s  <Plug>Ysurround
nmap ds <Plug>Dsurround
nmap cs <Plug>Csurround
nmap ss <Plug>Yssurround

"   CtrlP (+ FZF) {{{1

let g:ctrlp_cache_dir     = $XDG_CACHE_HOME . "/vim/ctrlp"
let g:ctrlp_types         = [ "fil", "buf", "mru" ]
let g:ctrlp_extensions    = [ "tag", "line" ]
let g:ctrlp_mruf_relative = 1
let g:ctrlp_mruf_exclude  = '/tmp/.*\|/temp/.*'
let g:ctrlp_map           = '<C-p><C-p>'

let g:ctrlp_prompt_mappings = {
      \ "PrtExit()":     [ "<Esc>" ],
      \ "PrtHistory(1)": [ "<C-f>" ],
      \ "ToggleType(1)": [ "<C-p>", "<C-Up>" ],
      \ }

nnoremap <C-p><C-b> <Cmd>CtrlPBuffer<CR>
nnoremap <C-p><C-l> <Cmd>CtrlPLine<CR>
nnoremap <C-p><C-m> <Cmd>CtrlPMRU<CR>
nnoremap <C-p><C-t> <Cmd>CtrlPTag<CR>

if executable("fzf")
  if index(g:ctrlp_types, "fil") >= 0
    call remove(g:ctrlp_types, index(g:ctrlp_types, "fil"))
    exec "nnoremap" g:ctrlp_map "<Cmd>FZF<CR>"
    let g:ctrlp_map = ''
  endif

  let g:fzf_layout = { 'down': '10' }

  augroup FZF
    autocmd!
    autocmd FileType fzf setl laststatus=0 | au BufLeave <buffer> setl ls=2
    autocmd FileType fzf tmap <buffer> <C-p> <C-c><Cmd>sleep 1m<CR><Cmd>CtrlP<CR>
  augroup END
endif

"   Netrw {{{1

let g:netrw_banner       = 0    " do not display info on the top of window
let g:netrw_liststyle    = 3    " tree-view
let g:netrw_browse_split = 4    " use the previous window to open file
let g:netrw_winsize      = -28  " window size

augroup NETRW_CONF
  autocmd!
  autocmd filetype netrw silent! unmap <buffer> <F1>
  autocmd filetype netrw silent! unmap <buffer> <C-l>
  autocmd filetype netrw setlocal statusline=%f
augroup END

"   Tagbar {{{1

nnoremap <Leader>t :Tagbar<CR>

let g:tagbar_sort = 0
let g:tagbar_compact = 1
let g:tagbar_ctags_options = [ findfile('ctags.cnf', &rtp) ]

hi! link TagbarNestedKind Comment
hi! link TagbarType Comment

"   vim-bookmarks {{{1

let g:bookmark_auto_save_file = $XDG_STATE_HOME . "/vim/bookmarks"
let g:bookmark_disable_ctrlp = 1
let g:bookmark_display_annotation = 1
let g:bookmark_no_default_key_mappings = 1

nmap <Leader>mm  <Plug>BookmarkToggle
nmap <Leader>mi  <Plug>BookmarkAnnotate
nmap <Leader>ma  <Plug>BookmarkShowAll
nmap <Leader>m[  <Plug>BookmarkPrev
nmap <Leader>m]  <Plug>BookmarkNext
nmap <Leader>mk  <Plug>BookmarkMoveUp
nmap <Leader>mj  <Plug>BookmarkMoveDown
nmap <Leader>mg  <Plug>BookmarkMoveToLine

"   Signify {{{1

set updatetime=250
let g:signify_sign_change = '~'
highlight link  SignifySignChange  DiffText

"   vim-slime {{{1

let g:slime_no_mappings = 1
let g:slime_paste_file = tempname()

let g:slime_target =
      \ has("nvim") ? "neovim" :
      \ has("terminal") ? "vimterminal" :
      \ executable("tmux") ? "tmux" :
      \ !empty($DISPLAY) ? "x11" :
      \ ""

noremap <F5> :SlimeSend<CR>
com! -nargs=+ -bang  Slime  call slime#send(<q-args> . (<bang>0 ? "" : "\r"))

"   asyncrun.vim {{{1

let g:asyncrun_open = 10
command! -nargs=? Grep AsyncRun -program=grep @ <args>
command! -nargs=? Make AsyncRun -program=make @ <args>
nnoremap <F7> <Cmd>w <bar> Make %:p<CR>
autocmd User AsyncRunStop copen | wincmd p

"   conflict-marker.vim {{{1

let g:conflict_marker_highlight_group = 'SpecialKey'

function! s:ConflictMarker_init() abort
  autocmd BufReadPre,BufWinEnter <buffer> ++once setlocal fdm=syntax

  exec 'syntax region ConflictMarker_NoConflict containedin=ALL'
        \  'start=/\%^\%(' .g:conflict_marker_begin . '\)\@<!/'
        \  'start=/\%(' . g:conflict_marker_end . '\_.\{-}\n\)\@<=/'
        \  'end=/' . g:conflict_marker_begin . '\&/'
        \  'end=/\%$/'

  hi link ConflictMarkerFoo NonText
  autocmd BufWinEnter <buffer> ++once
        \   for v in ['begin', 'common_ancestors', 'end']
        \ |   call matchadd('ConflictMarkerFoo', g:conflict_marker_{v}.' \zs.*')
        \ | endfor

  autocmd BufWinEnter <buffer> ++once
        \ call utils#syntax#rule_append(
        \   'ConflictMarkerOurs',
        \   'end=/'.g:conflict_marker_common_ancestors.'\&/'
        \ )

  autocmd BufWinEnter <buffer> ++once
        \ syn match ConflictMarker_Fold /.*/ transparent fold

endfunction

augroup MY_CONFLICT_MARKER_DETECT
  autocmd!
  autocmd BufReadPost,FileChangedShellPost,ShellFilterPost,StdinReadPost *
        \   if conflict_marker#detect#markers()
        \ |   call s:ConflictMarker_init()
        \ | endif
augroup END

"   vim-visual-multi {{{1

let g:VM_maps = {
      \   "Undo": 'u',
      \   "Redo": '<C-r>',
      \ }

hi! VM_Mono NONE ctermbg=magenta
hi! link VM_Insert VM_Mono

"   exrc.vim {{{1

let g:exrc#cache_file = $XDG_STATE_HOME.'/vim/exrc'

let g:exrc#names = [ '.exrc', '.vimrc' ]
      \ + (has('gui') ? [ '.gvimrc' ] : [])
      \ + (has('nvim') ? [ '.nvimrc', '.nvim.lua' ] : [])

for e in g:exrc#names
  exec 'autocmd BufWritePost' e 'nested silent ExrcTrust'
endfor | unlet e

"   ~ {{{1

au VimEnter * com! -bang UseVimball
      \ let d = printf("%s/%s/%s",
      \                split(&rtp,',')[0].'/pack/vimball',
      \                <bang>0 ? "start" : "opt",
      \                expand('%:t:r:r'))
      \ | call mkdir(d, 'p')
      \ | call vimball#Vimball(1, d)
      \ | unlet d

set keywordprg=:Man

let g:abolish_save_file = $XDG_DATA_HOME."/vim/abolish.vim"
let g:EditorConfig_enable_for_new_buf = 1
let g:termdebug_wide = 1
let g:traces_abolish_integration = 1
let g:traces_preview_window = "10new"
let g:wrapwidth_hl = "Ignore"

let g:miniSnip_extends = {
      \   "arduino"  : [ "cpp", "c" ],
      \   "cpp"      : [ "c" ],
      \   "html"     : [ "css", "javascript" ],
      \   "markdown" : [ "html" ],
      \   "php"      : [ "html" ],
      \   "tex"      : [ "plaintex" ],
      \ }

let g:undotree_SetFocusWhenToggle = 1
nnoremap <F1> :UndotreeToggle<CR>

let g:qf_mapping_ack_style = 1
let g:qf_loclist_window_bottom = 0

nmap ]b <Plug>(buf-surf-forward)
nmap [b <Plug>(buf-surf-back)

let g:fauxClip_sys_force = $WSL2_GUI_APPS_ENABLED

" }}}1

runtime! vimrc.d/*

if has('gui_running') && !has('patch-9.1.0327')
  runtime! gvimrc
endif
