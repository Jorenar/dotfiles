# CommaFeed version: 4.6.0 (346fb6b)

app:
  publicUrl: ${COMMAFEED_URL}

  refreshIntervalMinutes: 10

  backgroundThreads: 3
  databaseUpdateThreads: 1

  allowRegistrations: false
  createDemoAccount: false

  heavyLoad: false
  pubsubhubbub: false
  imageProxyEnabled: false

  cache: noop
  queryTimeout: 0
  keepStatusDays: 0
  maxFeedCapacity: 500

database:
  driverClass: org.h2.Driver
  url: jdbc:h2:${XDG_DATA_HOME}/commafeed/db
  user: sa
  password: sa
  properties:
    charSet: UTF-8
  validationQuery: "/* CommaFeed Health Check */ SELECT 1"
  minSize: 1
  maxSize: 50
  maxConnectionAge: 30m

server:
  applicationConnectors:
    - type: http
      port: 8082
  adminConnectors: []

logging:
  level: WARN
  loggers:
    com.commafeed: INFO
    liquibase: INFO
    io.dropwizard.server.ServerFactory: INFO
    org.hibernate.orm.deprecation: "OFF"
  appenders:
    - type: console
    - type: file
      currentLogFilename: "${XDG_STATE_HOME}/commafeed.log"
      threshold: ALL
      archive: false
      archivedLogFilenamePattern: log/commafeed-%d.log
      archivedFileCount: 5
      timeZone: UTC

session:
  path: ${XDG_DATA_HOME}/commafeed/sessions



# Custom CSS
############
#
#	/* Next/Prev buttons */
#	#header .mantine-Center-root > .mantine-Group-root > :is(
#	  button:nth-child(1),
#	  button:nth-child(2),
#	  .mantine-Divider-root:nth-child(3))
#	{
#	  display: none;
#	}
#
#	/* Search feeds */
#	.mantine-Stack-root > div > .mantine-InputWrapper-root
#	{
#	  display: none;
#	}
#
#	/* Ctrl+K feed search */
#	.mantine-Spotlight-root
#	{
#	  display: none;
#	}

# Custom JS
###########
#
#	// sortFeeds();
#
#	function sortByTitle(parent) {
#	  const nodes = Array.from(parent.children).sort((a, b) => {
#	    const at = a.getAttribute("text").toLowerCase();
#	    const bt = b.getAttribute("text").toLowerCase();
#
#	    if (at < bt) return -1;
#	    if (at > bt) return 1;
#	    return 0;
#	  });
#	  nodes.forEach(sortByTitle);
#	  parent.replaceChildren(...nodes);
#	}
#
#	function getOpml() {
#	  return fetch(window.location.origin + "/rest/feed/export")
#	    .then((res) => res.text())
#	    .then((str) => new window.DOMParser().parseFromString(str, "text/xml"));
#	}
#
#	function postOpml(opml) {
#	  const opmlText = new XMLSerializer().serializeToString(opml);
#	  const opmlFile = new File([opmlText], "rss.opml", { type: "text/xml" });
#
#	  const formData = new FormData();
#	  formData.append("file", opmlFile);
#
#	  fetch(window.location.origin + "/rest/feed/import", {
#	    method: "POST",
#	    body: formData,
#	  });
#	}
#
#	async function sortFeeds() {
#	  const xml = await getOpml();
#	  sortByTitle(xml.children[0].children[1]);
#	  postOpml(xml);
#	}
