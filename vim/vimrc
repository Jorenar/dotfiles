" # VIMRC #

" BASICS {{{1

filetype plugin indent on
set backspace=indent,eol,start
set nocompatible
syntax enable

" XDG support
let g:pack_path=$XDG_DATA_HOME.'/vim/pack/plugins/'
set backupdir=$XDG_DATA_HOME/vim/backup
set directory=$XDG_CACHE_HOME/vim/swap
set packpath^=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after
set undodir=$XDG_CACHE_HOME/vim/undo
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo

" Set colorscheme
colorscheme darkness

" AUTOCMDS {{{1

" Open file at the last known position
autocmd BufReadPost * if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit' | exe "normal! g`\"" | endif

" Disable continuation of comments to the next line
autocmd BufReadPost * set fo-=c fo-=r fo-=o

" Trim trailing whitespace
autocmd BufWritePre * silent! undojoin | %s/\s\+$//e | %s/\(\n\r\?\)\+\%$//e

" Set PATH for C/C++
autocmd filetype c,cpp setlocal path+=/usr/include/**

" Set tags file for C/C++
autocmd filetype c,cpp setlocal tags+=$XDG_DATA_HOME/vim/tags/include.tags

" Set .h to be of C filetype
autocmd BufRead,BufNewFile *.h set filetype=c

" Set 'foldmethod' to 'syntax'
autocmd filetype c,cpp,css,html,java,javascript,sh setlocal foldmethod=syntax

" Quit QuickFix window along with source file window
autocmd WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix" | q | endif

" QuickFix window below other windows
autocmd filetype qf wincmd J
autocmd filetype qf setlocal nocursorline nocursorcolumn

" Automatically open QuickFix
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow

" QuckFix's mappings
autocmd filetype qf noremap <buffer> g- :colder<CR>
autocmd filetype qf noremap <buffer> g+ :cnewer<CR>

" COMMANDS {{{1

command! -nargs=* GrepRename call <SID>GrepRename(<f-args>)
command! -nargs=+ FillLine call <SID>FillLine(<f-args>)
command! -nargs=+ Grep execute "vimgrep /<args>/j ** | :copen"
command! -nargs=+ Spelling execute 'setlocal spell spelllang=<args>'
command! -range -nargs=+ Align <line1>,<line2>!column -Lts'<args>' -o'<args>'
command! -range -nargs=0 -bang VisSort sil! keepj <line1>,<line2>call <SID>VisSort(<bang>0)
command! -range=% Sort normal :<line1>,<line2>sort i<CR>
command! Debug normal :Termdebug<CR><C-w>H
command! ExecCurrentLine normal :.w !sh<CR>
command! FileSize echo getfsize(expand(@%))
command! GetPlugins call s:GetPlugins()
command! Make call s:Make()
command! SortBlock :normal! vip:sort i<CR>

" COMPILE AND RUN {{{1

let s:compiler_for_filetype = {
            \ "c,cpp"    : "gcc",
            \ "go"       : "go",
            \ "haskell"  : "ghc",
            \ "html"     : "tidy",
            \ "perl"     : "perl",
            \ "php"      : "php",
            \ "plaintex" : "tex",
            \ "python"   : "pyunit",
            \ "tex"      : "tex",
            \}

let s:makeprg_for_filetype = {
            \ "asm"      : "as -o %<.o % && ld -s -o %< %<.o && rm %<.o && ./%<",
            \ "basic"    : "vintbas %",
            \ "c"        : "gcc -std=gnu18 -g % -o %< && ./%<",
            \ "cpp"      : "g++ -std=gnu++11 -g % -o %< && ./%<",
            \ "go"       : "go build && ./%<",
            \ "haskell"  : "ghc -o %< %; rm %<.hi %<.o && ./%<",
            \ "html"     : "tidy -quiet -errors --gnu-emacs yes %:S; firefox -new-window % &",
            \ "lisp"     : "clisp %",
            \ "lua"      : "lua %",
            \ "markdown" : "grip --quiet -b %",
            \ "nasm"     : "yasm -f elf64 % && ld -g -o %< %<.o && rm %<.o && ./%<",
            \ "perl"     : "perl %",
            \ "plaintex" : "pdftex -file-line-error -interaction=nonstopmode % && zathura %<.pdf",
            \ "python"   : "python %",
            \ "rust"     : "rustc % && ./%<",
            \ "sh"       : "chmod +x %:p && %:p",
            \ "tex"      : "pdflatex -file-line-error -interaction=nonstopmode % && zathura %<.pdf",
            \ "xhtml"    : "tidy -asxhtml -quiet -errors --gnu-emacs yes %:S; firefox -new-window % &",
            \}

" FORMATTING {{{1

let g:html_indent_autotags = "html"
let g:html_indent_style1 = "inc"
set autoindent
set cindent
set expandtab
set formatoptions-=t
set shiftround
set shiftwidth=4
set softtabstop=4
set tabstop=4
set textwidth=79

let s:tab_width_for_filetype = {
            \ "html,css,xhtml,xml" : 2,
            \ "javascript"         : 2,
            \ "lua"                : 2,
            \ "markdown"           : 2,
            \}

let s:formatprg_for_filetype = {
            \ "c,cpp"      : "astyle --style=kr -s4 -N -S -xG -xU -k3 -p",
            \ "css"        : "css-beautify -s 2 --space-around-combinator",
            \ "go"         : "gofmt",
            \ "html"       : "tidy -q -w -i --show-warnings 0 --show-errors 0 --tidy-mark no",
            \ "java"       : "astyle --style=java -s4 -N -S -xG -xU -f -k3 -xj -p",
            \ "javascript" : "js-beautify -s 2",
            \ "json"       : "js-beautify",
            \ "python"     : "autopep8 -",
            \ "sql"        : "sqlformat -k upper -r -",
            \ "xhtml"      : "tidy -asxhtml -q -m -w -i --show-warnings 0 --show-errors 0 --tidy-mark no --doctype loose",
            \ "xml"        : "tidy -xml -q -m -w -i --show-warnings 0 --show-errors 0 --tidy-mark no",
            \}

" FUNCTIONS {{{1
" Color_demo - preview of Vim 256 colors {{{2
function! Color_demo() abort
    30 vnew
    setlocal nonumber buftype=nofile bufhidden=hide noswapfile
    setlocal statusline=[%n]
    setlocal statusline+=\ Color\ demo
    let num = 255
    while num >= 0
        execute 'hi col_'.num.' ctermbg='.num.' ctermfg=white'
        execute 'syn match col_'.num.' "ctermbg='.num.':...." containedIn=ALL'
        call append(0, 'ctermbg='.num.':....')
        let num = num - 1
    endwhile
endfunction

" GetPlugins - install and update plugins {{{2
function! s:GetPlugins()
    for plugin in g:plugins
        let plugin_name = substitute(plugin, ".*\/", "", "")
        let plugin_dir = g:pack_path."/opt/".plugin_name
        let github_url = "https://github.com/".plugin
        let cmd = "git clone ".github_url." ".plugin_dir." 2> /dev/null || (cd ".plugin_dir." ; git pull)"
        call system(cmd)
        execute "packadd ".plugin_name
    endfor
    silent! helptags ALL
    redraw!
    echo "DONE"
endfunction

" GrepRename - replace through whole project {{{2
function! s:GrepRename(expr1, expr2) abort
    execute "tabe | vimgrep /\\C\\W".a:expr1."\\W/j ** | cdo s/\\C\\\(\\W\\)".a:expr1."\\\(\\W\\)/\\1".a:expr2."\\2/gc | update" | q
endfunction

" FileEncoding ~ for Status line {{{2
function! FileEncoding() abort
    return (&fenc == "" ? &enc : &fenc).((exists("+bomb") && &bomb) ? " BOM" : "")
endfunction

" FileSize     ~ for Status Line{{{2
function! FileSize() abort
    let bytes = getfsize(expand(@%))
    if (bytes >= 1024*1024)
        return printf('~%.1f MiB', bytes/(1024*1024.0))
    elseif (bytes >= 1024)
        return printf('~%.1f KiB', bytes/1024.0)
    elseif (bytes <= 0)
        return '0 B'
    else
        return bytes . ' B'
    endif
endfunction

" FillLine - fill line with characters to given column {{{2
function! s:FillLine(str, ...) abort
    let to_column = get(a:, 1, &tw)
    let reps = (to_column - col("$")) / len(a:str)
    if reps > 0
        .s/$/\=(' '.repeat(a:str, reps))/
    endif
endfunction

" Make {{{2
function! s:Make() abort
    let b:makeprg_temp = &makeprg
    let &l:makeprg = "make $*"
    make
    let &l:makeprg = b:makeprg_temp
endfunction

" VisSort - sorts based on visual-block selected portion of the lines {{{2
function! s:VisSort(isnmbr) range abort
    if visualmode() != "\<c-v>"
        execute "silent! ".a:firstline.",".a:lastline."sort i"
        return
    endif
    let firstline = line("'<")
    let lastline  = line("'>")
    let keeprega  = @a
    silent normal! gv"ay
    '<,'>s/^/@@@/
    silent! keepjumps normal! '<0"aP
    if a:isnmbr
        silent! '<,'>s/^\s\+/\=substitute(submatch(0),' ','0','g')/
    endif
    execute "sil! keepj '<,'>sort i"
    execute "sil! keepj ".firstline.",".lastline.'s/^.\{-}@@@//'
    let @a = keeprega
endfun

" VSetSearch - Search for selected text, forwards or backwards. {{{2
function! s:VSetSearch(cmdtype) abort
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
    let @s = temp
endfunction

" WhatHighlightsIt - check highlight group under the cursor {{{2
function! WhatHighlightsIt() abort
    echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
                \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
                \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"
endfunction

" MAPPINGS {{{1
" Normal mode {{{2
nnoremap ' `
nnoremap '' ``
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <expr> <F4> &virtualedit == "all" ? ":set virtualedit=\<CR>" : ":set virtualedit=all\<CR>"
nnoremap <expr> <F5> g:colors_name == "darkness" ? ":colo vim-monokai-tasty\<CR>" : ":colo darkness\<CR>"
nnoremap <F3> :set cursorline! cursorcolumn!<CR>
nnoremap <F9> :w <bar> make<CR>
nnoremap <leader>" :vert term<CR>
nnoremap <leader>= gg=G``
nnoremap <leader>` :redraw!<CR>
nnoremap <leader>h :nohlsearch<CR>
nnoremap <leader>q gggqG``
nnoremap <leader>r :%s/\<<C-r><C-w>\>//g<Left><Left>
nnoremap <leader>R :%s/\<<C-r><C-w>\>/<C-r><C-w>/g<Left><Left>
nnoremap <leader>v ggVG
nnoremap <S-Tab> <C-w>W
nnoremap <Tab> <C-w><C-w>
nnoremap gf <C-w>gf
nnoremap gx :execute 'silent! !xdg-open "<cfile>" &> /dev/null &' <bar> redraw! <CR>
nnoremap j gj
nnoremap k gk


" Terminal mode {{{2
tnoremap <C-h> <C-\><C-N><C-w>h
tnoremap <C-j> <C-\><C-N><C-w>j
tnoremap <C-k> <C-\><C-N><C-w>k
tnoremap <C-l> <C-\><C-N><C-w>l
tnoremap <Esc> <C-\><C-n>

" Visual mode {{{2
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>

" ### DISABLE {{{2
map gh <nop>
vmap s <nop>

" OPTIONS {{{1

let g:netrw_dirhistmax = 0
let g:netrw_winsize = -28
set backup
set colorcolumn=+1
set completeopt=menuone,noinsert,noselect
set cursorlineopt=screenline
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set linebreak
set modeline
set nomodelineexpr
set nowrap
set number
set omnifunc=syntaxcomplete#Complete
set scrolloff=5
set sessionoptions=blank,buffers,folds,tabpages,winsize,terminal
set shortmess+=I
set showcmd
set smartcase
set splitbelow
set splitright
set title
set undofile
set wildmenu

let g:sh_fold_enabled=5
let g:vimsyn_folding="af"
set foldmethod=indent
set nofoldenable

set dictionary+=/usr/share/dict/polish
set dictionary+=/usr/share/dict/words
set path=**,./
set tags+=.git/tags;/

" PLUGINS {{{1

" Run :GetPlugins to install/update
let g:plugins = [
            \ "Jorengarenar/pseudoClip",
            \ "Jorengarenar/ViewPort",
            \ "Jorengarenar/vim-darkness",
            \ "mbbill/undotree",
            \ "sirver/ultisnips",
            \ "tpope/vim-surround",
            \]

" VARIABLES
let g:UltiSnipsEditSplit          = "context"
let g:UltiSnipsExpandTrigger      = "<C-j>"
let g:UltiSnipsListSnippets       = "<C-k>"
let g:UltiSnipsSnippetDirectories = [$VIMDOTDIR.'/UltiSnips']
let g:undotree_SetFocusWhenToggle = 1
let g:undotree_ShortIndicators    = 1
let g:viewport_split_vertical     = 1

" MAPPINGS
nmap s ys
noremap <leader><F1> :UndotreeToggle<CR>
vmap s S

" STATUS LINE {{{1

set statusline=
set statusline+=\ %f                " Relative path to the file
set statusline+=\ \                 " Separator
set statusline+=%y                  " Filetype
set statusline+=[%{&ff}]            " File format
set statusline+=[%{FileEncoding()}] " File encoding
set statusline+=\ \                 " Separator
set statusline+=[%{&fo}]            " Format options
set statusline+=\ \                 " Separator
set statusline+=[%{FileSize()}]     " File size
set statusline+=\ \                 " Separator
set statusline+=%r                  " Readonly flag
set statusline+=%w                  " Preview flag
set statusline+=\ \                 " Separator
set statusline+=%m                  " Modified flag
set statusline+=%=                  " Switch to the right side
set statusline+=[0x%B]\             " Current char hex code
set statusline+=%l/                 " Current line
set statusline+=%L                  " Total lines
set statusline+=\ \:\ %c\           " Current column

" ### OTHER {{{1

" Add TermDebug
packadd termdebug
packadd matchit

" Create backup and plugin dirs
call mkdir(g:pack_path."/opt", 'p')
call mkdir(&backupdir, 'p')

" Applying rules from arrays/dictionaries {{{

for [ft, comp] in items(s:compiler_for_filetype)
    execute "autocmd filetype ".ft." compiler! ".comp
endfor

for [ft, mp] in items(s:makeprg_for_filetype)
    execute 'autocmd filetype '.ft.' let &l:makeprg="('.mp.')"'
endfor

for [ft, fp] in items(s:formatprg_for_filetype)
    execute "autocmd filetype ".ft." let &l:formatprg=\"".fp."\" | setlocal formatexpr="
endfor

for [ft, width] in items(s:tab_width_for_filetype)
    execute "autocmd filetype ".ft." setlocal tabstop=".width." shiftwidth=".width." softtabstop=".width
endfor

for plugin in g:plugins
    execute "silent! packadd! ".substitute(plugin, ".*\/", "", "")
endfor

" }}}

" vim: fdm=marker foldenable:
