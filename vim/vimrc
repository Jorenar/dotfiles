" XDG support {{{1

if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

let g:netrw_home = $XDG_DATA_HOME."/vim"
call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)
set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p', 0700)

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)

if !has('nvim') | set viminfofile=$XDG_CACHE_HOME/vim/viminfo | endif

" BASICS {{{1

set nocompatible
filetype plugin indent on
syntax enable
silent! helptags ALL " genereate help tags
colorscheme darkness

" COMMANDS {{{1

com! -range -nargs=+  Align            <line1>,<line2>!column -Lts'<args>' -o'<args>'
com! -bang            ColorUp          exec "colo " . (<bang>0 ? "darkness" : "colorUp")
com!                  CountSpell       echo utils#CountSpell()
com!                  ExecCurrentLine  normal :.w !sh<CR>
com! -nargs=1         FillLine         exec "norm! $" | exec "FillToColumn" <q-args> &tw
com! -nargs=+         FillToColumn     exec {str,r -> "norm! a".repeat(str, (r-col("."))/len(str))}(<f-args>)
com! -nargs=+         Grep             exec "lvimgrep /".<q-args>."/j **"
com! -nargs=+         GrepRename       exec {a,b -> 'tabe | lv /\C\<' . a . '\>/j ** | ldo s/\C\<' . a . '\>/' . b . '/gc | up'}(<f-args>) | q
com! -range=%         Sort             normal :<line1>,<line2>sort i<CR>
com!                  SortBlock        normal! vip:sort i<CR>
com! -nargs=? -bang   Spelling         setlocal spell<bang> spelllang=<args>
com!                  SudoW            exec 'silent! write !sudo tee % >/dev/null' | edit!
com!                  SyntaxStack      echo join(reverse(map(synstack(line('.'), col('.')), 'synIDattr(v:val,"name")')),' ')
com! -range           VisSort          sil! keepj <line1>,<line2>call utils#VisSort()

" MAPPINGS {{{1

nnoremap ' `
nnoremap <expr> <F4> &ve == "all" ? ":set ve=\<CR>" : ":set ve=all\<CR>"
nnoremap <F3> :set cursorline! cursorcolumn!<CR>
nnoremap <Leader>= gg=G``
nnoremap <Leader>b :bnext<CR>
nnoremap <Leader>h :nohlsearch<CR>
nnoremap <Leader>q m"gggqG`"
nnoremap <Leader>r :exec {o -> {n -> n != "" ? '%s/\C\<' . o . '\>/' . n . '/g' : ''}(input(o." > ", o))}(expand('<cword>'))<CR>
nnoremap <M-a> :cwindow<CR>
nnoremap j gj
nnoremap k gk

inoremap <expr> <C-o> pumvisible() ? "\<C-n>" : "\<C-o>"

tnoremap <silent> <C-\><C-\> <C-\><C-n>
tnoremap <silent> <C-\><C-m> <C-\><C-n>:let b:auto_insert = !b:auto_insert<CR>

imap <Esc>[29~ <nop>
map  <Esc>[29~ <nop>
map gh <nop>

" OPTIONS {{{1

set backspace=indent,eol,start
set backup
set colorcolumn=+1,+21,+31
set complete+=kspell
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set modeline nomodelineexpr
set nowrap
set number
set scrolloff=5
set sessionoptions=blank,buffers,folds,tabpages,winsize
set shortmess+=I
set showcmd
set smartcase
set spellsuggest=double
set splitbelow splitright
set switchbuf=usetab
set title
set undofile
set wildmenu wildmode=full

set completeopt=menuone,noinsert,noselect
set omnifunc=syntaxcomplete#Complete
set pumheight=20

if has('nvim')
  set guicursor=n-v-c-sm-i-r-ci-ve-cr-o:block " setting a:block breaks blinking
  set wildoptions-=pum " don't use popupmenu for wildmode completion
endif

set path=**,./
set tags+=.git/tags;

augroup FORMATOPTIONS
  autocmd!
  autocmd FileType * set fo-=c fo-=r fo-=o " Disable continuation of comments to the next line
  autocmd FileType * set formatoptions+=j  " Remove a comment leader when joining lines
  autocmd FileType * set formatoptions+=l  " Don't break a line after a one-letter word
  autocmd FileType * set formatoptions+=n  " Recognize numbered lists
  autocmd FileType * set formatoptions-=q  " Don't format comments
  autocmd FileType * set formatoptions-=t  " Don't autowrap text using 'textwidth'
augroup END

set cindent
set expandtab
set shiftround
set shiftwidth=0   " If 0, then uses value of 'tabstop'
set softtabstop=-1 " If negative, then uses 'shiftwidth' (which can use 'tabstop')
set tabstop=4
set textwidth=79

set foldmethod=indent
set foldtext=MyFoldText()
set nofoldenable

function! MyFoldText() abort
  return "+-" . v:folddashes . " " . printf("%3d", v:foldend - v:foldstart + 1) . " lines: "
        \ . trim(substitute(getline(v:foldstart), split(&l:fmr, ',')[0].'\d\?', '', '')) . " "
endfunction

" PLUGINS AND PACKAGES {{{1

runtime plugin/minPlug.vim

let g:minPlug_singleFiles = [
      \   [ "autoload/repeat.vim",   "https://git.io/JmdpI", "$XDG_CONFIG_HOME/vim" ],
      \   [ "plugin/commentary.vim", "https://git.io/JGOEP", "$XDG_CONFIG_HOME/vim" ],
      \   [ "plugin/fastfold.vim",   "https://git.io/JIEo6", "$XDG_CONFIG_HOME/vim" ],
      \   [ "plugin/surround.vim",   "https://git.io/JLXyW", "$XDG_CONFIG_HOME/vim" ],
      \   [ "syntax/tex.vim",        "https://git.io/JYBDH", "$XDG_CONFIG_HOME/vim" ],
      \ ]

MinPlug ctrlpvim/ctrlp.vim
MinPlug Jorengarenar/miniSnip
MinPlug majutsushi/tagbar
MinPlug mbbill/undotree
MinPlug natebosch/vim-lsc
MinPlug puremourning/vimspector

packadd cfilter
packadd matchit
source  $VIMRUNTIME/ftplugin/man.vim

" Config {{{
" Surround {{{1

let g:surround_no_mappings = 1

xmap s  <Plug>VSurround
nmap s  <Plug>Ysurround
nmap ds <Plug>Dsurround
nmap cs <Plug>Csurround
nmap ss <Plug>Yssurround

" CtrlP {{{1

let g:ctrlp_brief_prompt        = 1
let g:ctrlp_cache_dir           = $XDG_CACHE_HOME . "/vim/ctrlp"
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_types               = [ 'fil', 'buf' ]

let g:ctrlp_prompt_mappings = {
      \ 'PrtExit()':     [ '<Esc>' ],
      \ 'PrtHistory(1)': [ '<C-f>' ],
      \ 'ToggleType(1)': [ '<C-p>', '<c-up>' ],
      \ }

" Tagbar {{{1

nnoremap <Leader>t :Tagbar<CR>

let g:tagbar_compact = 1
let g:tagbar_sort    = 0

hi! link TagbarNestedKind Comment
hi! link TagbarType Comment

" ~ {{{1

let g:fastfold_fold_command_suffixes = [ 'C', 'm', 'M', 'N', 'x', 'X' ]
let g:fastfold_minlines              = 0
let g:fastfold_savehook              = 0

let g:minPlug_updateSelf          = 0
let g:undotree_SetFocusWhenToggle = 1

let g:miniSnip_extends = {
      \ "arduino"  : [ "cpp", "c" ],
      \ "cpp"      : [ "c" ],
      \ "markdown" : [ "html" ],
      \ "php"      : [ "html" ],
      \ "tex"      : [ "plaintex" ],
      \ }

nnoremap <F1> :UndotreeToggle<CR>

" }}}

" STATUS LINE {{{1

" Helpers {{{

function! s:FileSize() abort
  let [ bytes, units, i ] = [ getfsize(expand(@%)), ['', 'Ki', 'Mi', 'Gi'], 0 ]
  while bytes >= 1024 | let bytes = bytes / 1024.0 | let i += 1 | endwhile
  return printf((i ? "~%.1f" : "%d")." %sB", bytes, units[i])
endfunction

function! s:IssuesCount() abort
  let errors   = filter(getqflist(), 'v:val.type == "E"')
  let warnings = filter(getqflist(), 'v:val.type == "w"')
  return len(errors)."E ".len(warnings)."w"
endfunction

function! s:ModifBufs() abort
  let cnt = len(filter(getbufinfo(), 'v:val.changed'))
  return cnt == 0 ? "" : (&mod ? "[+". (cnt > 1 ? cnt : "") ."]" : "[".cnt."]")
endfunction

function! s:NumOfBufs() abort
  let num = len(getbufinfo({'buflisted':1}))
  let hid = len(filter(getbufinfo({'buflisted':1}), 'empty(v:val.windows)'))
  return hid ? num-hid."+".hid : num
endfunction

" }}}

let &statusline = ""
      \ . "{%{" . expand('<SID>') . "NumOfBufs()}}"
      \ . "  %f  %y" . "[%{&ff}]"
      \ . '[%{(&fenc == "" ? &enc : &fenc).(&bomb ? ",B" : "")}]'
      \ . "  [%{&fo}]  "
      \ . "[%{" . expand('<SID>') . "FileSize()}]"
      \ . "  %r" . "%{&ma\|\|&ro?'':'[-]'}" . "%w  "
      \ . "%{" . expand('<SID>') . "ModifBufs()}"
      \ . "%="
      \ . "*%{" . expand('<SID>') . "IssuesCount()}*"
      \ . "  <0x%02B>  " . "%l/%L" . " : %c "

" ~ {{{1

augroup OTHER
  autocmd!

  " Open file at the last known position
  autocmd BufReadPost * if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit' | exec "norm! g`\"" | endif

  " Automatically open QuickFix
  autocmd QuickFixCmdPost [^l]* nested cwindow
  autocmd QuickFixCmdPost    l* nested lwindow

  " Undo if filter shell command returned an error
  autocmd ShellFilterPost * if v:shell_error | undo | endif

  " If file has more lines than window height, then fold it
  autocmd BufReadPost * if line('$') > winheight(0) | setlocal fen | endif

augroup END

augroup TRIM_TRAILING_WHITESPACE
  autocmd!
  autocmd BufWritePre * sil! undoj | %s/\v(\s+$|\_s+%$)//e | call histdel("/", -1)
augroup END

augroup TERMINAL_OPTIONS
  autocmd!

  execute 'autocmd '.(has("nvim") ? "TermOpen" : "TerminalOpen").' *
        \ let b:auto_insert = 1 | setlocal nonu stl=%f |
        \ au WinEnter <buffer> if b:auto_insert | sil! norm! i | endif'

  if has('nvim') " Sanitize Neovim :terminal
    autocmd TermOpen  * let b:term_job_finished = 0
    autocmd TermEnter * if  b:term_job_finished | call feedkeys("\<C-\>\<C-n>") | endif
    autocmd TermClose * let b:term_job_finished = 1 | call feedkeys("\<C-\>\<C-n>")
  endif

augroup END

hi! Dimmer ctermfg=244

runtime! vimrc.d/*.vim
autocmd VimEnter * ++once runtime! after/vimrc.d/*.vim

set secure
if filereadable("./.vimrc") | source ./.vimrc | endif
