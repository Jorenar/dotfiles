" # VIMRC #

" BASICS {{{1

filetype plugin indent on
set backspace=indent,eol,start
set nocompatible
syntax enable

" XDG support    (`set rtp^=$VIMDOTDIR` is in $VIMINIT) {{{

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif

set backupdir=$XDG_DATA_HOME/vim/backup
set directory=$XDG_CACHE_HOME/vim/swap
set packpath^=$XDG_DATA_HOME/vim
set runtimepath+=$VIMDOTDIR/after
set runtimepath+=$XDG_DATA_HOME/vim
set undodir=$XDG_CACHE_HOME/vim/undo

if !has('nvim') " Neovim has its own special location
  set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
endif

call mkdir($XDG_CACHE_HOME."/vim/swap", "p")
call mkdir($XDG_DATA_HOME."/vim/spell", 'p')
call mkdir(&backupdir, 'p')
call mkdir(&undodir, 'p')

" }}}

" "Force" Python3 (helpful for plugins)
if has('python3')
  python3 #
endif

silent! helptags ALL " genereate help tags

" COLORSCHEME {{{1

augroup colors
  au!
  au ColorScheme darkness hi cmakeCommand  cterm=bold
  au ColorScheme darkness hi Dimmer        cterm=italic ctermfg=245
augroup END

try
  colorscheme darkness
catch
  set bg=dark
  hi! ColorColumn ctermbg=233
  hi! Comment     ctermfg=240
  hi! link Folded Comment
  hi! link LineNr Comment
endtry

" COMMANDS {{{1

command! -nargs=* GrepRename call <SID>GrepRename(<f-args>)
command! -nargs=* TermDebug normal! :Termdebug <args><CR><C-w>K<C-w>j<C-w>L
command! -nargs=+ FillLine call <SID>FillLine(<f-args>)
command! -nargs=+ Grep execute "lvimgrep /".<q-args>."/j **"
command! -nargs=? -bang Spelling setlocal spell<bang> spelllang=<args>
command! -range -nargs=+ Align <line1>,<line2>!column -Lts'<args>' -o'<args>'
command! -range -nargs=0 -bang VisSort sil! keepj <line1>,<line2>call <SID>VisSort(<bang>0)
command! -range=% Sort normal :<line1>,<line2>sort i<CR>
command! Book setlocal nonumber wrap columns=90 colorcolumn= laststatus=0
command! ExecCurrentLine normal :.w !sh<CR>
command! GB call setbufvar(winbufnr(popup_atcursor(systemlist("cd " . shellescape(fnamemodify(resolve(expand('%:p')), ":h")) . " && git log --no-merges -n 1 -L " . shellescape(line("v") . "," . line(".") . ":" . resolve(expand("%:p")))), { "padding": [1,1,1,1], "pos": "botleft", "wrap": 0 })), "&filetype", "git")
command! SortBlock :normal! vip:sort i<CR>
command! SudoW execute 'silent! write !sudo tee % >/dev/null' | edit!
command! Term vertical terminal ++noclose
command! Todo lvimgrep "\<TODO\>" %

" FORMATTING {{{1

augroup FORMATOPTIONS
  autocmd!
  autocmd FileType * set fo-=c fo-=r fo-=o " Disable continuation of comments to the next line
  autocmd FileType * set formatoptions+=j  " Remove a comment leader when joining lines
  autocmd FileType * set formatoptions+=l  " Don't break a line after a one-letter word
  autocmd FileType * set formatoptions+=n  " Recognize numbered lists
  autocmd FileType * set formatoptions-=q  " Don't format comments
  autocmd FileType * set formatoptions-=t  " Don't autowrap text using 'textwidth'
augroup END

set cindent
set expandtab
set shiftround
set shiftwidth=0   " If 0, then uses value of 'tabstop'
set softtabstop=-1 " If negative, then uses 'shiftwidth' (which can use 'tabstop')
set tabstop=4
set textwidth=79

" For thise filetypes set 'tabstop' to 2
execute "autocmd FileType ".
      \   "arduino"           .",".
      \   "html,xhtml,xml"    .",".
      \   "*css"              .",".
      \   "javascript,json"   .",".
      \   "cmake"             .",".
      \   "lua"               .",".
      \   "markdown"          .",".
      \   "vim"               .",".
      \ " setlocal tabstop=2"

" For thise filetypes set 'tabstop' to 3
execute "autocmd FileType ".
      \   "ada"                .",".
      \   "plaintex,tex"       .",".
      \ " setlocal tabstop=3"

let s:formatprg_for_filetype = {
      \ "arduino"     : "uncrustify --l CPP base kr mb stroustrup 1tbs 2sw",
      \ "c"           : "uncrustify --l C base kr mb",
      \ "cpp"         : "uncrustify --l CPP base kr mb stroustrup",
      \ "cmake"       : "cmake-format --command-case lower -",
      \ "css"         : "css-beautify -s 2 --space-around-combinator",
      \ "go"          : "gofmt",
      \ "html"        : "tidy -q -w -i --show-warnings 0 --show-errors 0 --tidy-mark no",
      \ "java"        : "uncrustify --l JAVA base kr mb java",
      \ "javascript"  : "js-beautify -s 2",
      \ "json"        : "js-beautify -s 2",
      \ "python"      : "autopep8 -",
      \ "sql"         : "sqlformat -k upper -r -",
      \ "xhtml"       : "tidy -asxhtml -q -m -w -i --show-warnings 0 --show-errors 0 --tidy-mark no --doctype loose",
      \ "xml"         : "tidy -xml -q -m -w -i --show-warnings 0 --show-errors 0 --tidy-mark no",
      \}

for [ft, fp] in items(s:formatprg_for_filetype)
  execute "autocmd FileType ".ft." let &l:formatprg=\"".fp."\" | setlocal formatexpr="
endfor

" FUNCTIONS {{{1

function! s:GrepRename(expr1, expr2) abort " replace through whole project
  execute 'tabe | lvimgrep /\C\<' . a:expr1 . '\>/j ** | ldo s/\C\<' . a:expr1 . '\>/' . a:expr2 . '/gc | update'
  quit
endfunction

function! s:FillLine(str, ...) abort " fill line with characters to given column
  let to_column = get(a:, 1, &tw)
  let reps = (to_column - col("$")) / len(a:str)
  if reps > 0
    .s/$/\=(' '.repeat(a:str, reps))/
  endif
endfunction

function! MyFoldText() abort
  let [ old_cms, &l:cms ] = [ &l:cms, '' ]
  let text = foldtext()
  let &l:cms = old_cms
  return text
endfunction

function! RenameVar(old, ...) abort
  let newName = input( a:old . " -> ", get(a:, 1, a:old))
  if !empty(newName)
    execute "%s/\\C\\<" . a:old . "\\>/" . newName . "/g"
  endif
endfunction

function! s:VisSort(isnmbr) range abort " sorts based on visual-block selected portion of the lines
  if visualmode() != "\<c-v>"
    execute "silent! ".a:firstline.",".a:lastline."sort i"
    return
  endif
  let firstline = line("'<")
  let lastline  = line("'>")
  let keeprega  = @a
  silent normal! gv"ay
  '<,'>s/^/@@@/
  silent! keepjumps normal! '<0"aP
  if a:isnmbr
    silent! '<,'>s/^\s\+/\=substitute(submatch(0),' ','0','g')/
  endif
  execute "sil! keepj '<,'>sort i"
  execute "sil! keepj ".firstline.",".lastline.'s/^.\{-}@@@//'
  let @a = keeprega
endfun

function! s:VSetSearch(cmdtype) abort " search for selected text, forwards or backwards
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

" FOR STATUS LINE {{{

function! FileEncoding() abort
  return (&fenc == "" ? &enc : &fenc).((exists("+bomb") && &bomb) ? " BOM" : "")
endfunction

function! FileSize() abort
  let bytes = getfsize(expand(@%))
  if (bytes >= 1024*1024)
    return printf('~%.1f MiB', bytes/(1024*1024.0))
  elseif (bytes >= 1024)
    return printf('~%.1f KiB', bytes/1024.0)
  elseif (bytes <= 0)
    return '0 B'
  else
    return bytes . ' B'
  endif
endfunction

function! IssuesCount() abort
  if get(g:, 'ale_enabled', 0)
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return "*".all_errors."E ".all_non_errors."w*"
  else
    return "*".len(filter(getqflist(), 'v:val.valid'))." issues*"
  endif
endfunction

function! ModifBufs() abort
  let cnt = len(filter(getbufinfo(), 'v:val.changed'))
  return cnt == 0 ? "" : ( &mod ? "[+". (cnt>1?cnt:"") ."]" : "[".cnt."]" )
endfunction

function! NumOfBufs() abort
  let num = len(getbufinfo({'buflisted':1}))
  let hid = len(filter(getbufinfo({'buflisted':1}), 'empty(v:val.windows)'))
  return hid ? num-hid."+".hid : num
endfunction

" }}}

" MAPPINGS {{{1
" Normal mode {{{2
nnoremap ' `
nnoremap '' ``
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <expr> <F4> &virtualedit == "all" ? ":set virtualedit=\<CR>" : ":set virtualedit=all\<CR>"
nnoremap <F3> :set cursorline! cursorcolumn!<CR>
nnoremap <Leader><F5> :syntax sync fromstart<CR>
nnoremap <Leader>= gg=G``
nnoremap <Leader>b :bnext<CR>
nnoremap <Leader>h :nohlsearch<CR>
nnoremap <Leader>q m"gggqG`"
nnoremap <Leader>R :call RenameVar(expand('<cword>'))<CR>
nnoremap <Leader>r :call RenameVar(expand('<cword>'), "")<CR>
nnoremap <M-S-a> :copen<CR>
nnoremap <silent> <expr> <F5> g:colors_name == "darkness" ? ":syntax reset <bar> let g:colors_name=''\<CR>" : ":colo darkness\<CR>"
nnoremap gx :call job_start('xdg-open '.expand("<cfile>"))<CR>
nnoremap j gj
nnoremap k gk

" Insert mode {{{2
inoremap <expr> <C-o> pumvisible() ? "\<C-n>" : "\<C-o>"

" Terminal mode {{{2
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l
tnoremap <silent> <C-\><C-\> <C-\><C-n>
tnoremap <silent> <C-\><C-m> <C-\><C-n>:let b:auto_insert = 1 - b:auto_insert<CR>

" Visual mode {{{2
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-r>=@/<CR><CR>
xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-r>=@/<CR><CR>
vnoremap <Leader>s y:%s//g<Left><Left><C-r>"/

" ### DISABLE {{{2
map gh <nop>
vmap s <nop>
nmap s <nop>

" OPTIONS {{{1

set backup
set colorcolumn=+1,+21
set complete+=kspell
set foldtext=MyFoldText()
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set linebreak
set modeline
set mouse=n
set nomodelineexpr
set nowrap
set number
set scrolloff=5
set sessionoptions=blank,buffers,folds,tabpages,winsize
set shortmess+=I
set showcmd
set smartcase
set splitbelow
set splitright
set switchbuf=usetab
set title
set undofile
set wildmenu
set wildmode=full

set completeopt=menuone,noinsert,noselect
set omnifunc=syntaxcomplete#Complete
set pumheight=20

if has('nvim')
  set guicursor=n-v-c-sm-i-r-ci-ve-cr-o:block " setting a:block breaks blinking
  set wildoptions-=pum " don't use popupmenu for wildmode completion
endif

set foldmethod=indent
set nofoldenable

set dictionary+=/usr/share/dict/polish
set dictionary+=/usr/share/dict/words
set path=**,./
set tags+=.git/tags;

" PLUGINS AND PACKAGES {{{1

if empty(glob(substitute(&packpath, ",.*", "", "")."/pack/plugins/opt/minPlug"))
  call system("git clone --depth=1 https://github.com/Jorengarenar/minPlug ".
        \ substitute(&packpath, ",.*", "", "")."/pack/plugins/opt/minPlug")
  autocmd VimEnter * silent! MinPlugInstall | echo "minPlug: INSTALLED"
endif

packadd minPlug

MinPlug ctrlpvim/ctrlp.vim
MinPlug dense-analysis/ale
MinPlug Jorengarenar/fauxClip
MinPlug Jorengarenar/miniSnip
MinPlug Jorengarenar/vim-sBnR
MinPlug majutsushi/tagbar
MinPlug mbbill/undotree
MinPlug prabirshrestha/vim-lsp
MinPlug puremourning/vimspector

let g:minPlug_singleFiles = {
      \ "MvVis.vim"     : [ "plugin", "https://git.io/JkSRr" ],
      \ "sql-upper.vim" : [ "ftplugin/sql", "https://git.io/JkQjr" ],
      \ }


packadd cfilter
packadd matchit
packadd termdebug
source  $VIMRUNTIME/ftplugin/man.vim

" MAPPINGS
nmap <M-a> <Plug>(ale_detail)
nnoremap <F1> :UndotreeToggle<cr>
nnoremap <F2> :ALEToggle<CR>
nnoremap <Leader>t :Tagbar<CR>

" OPTIONS
let g:ale_disable_lsp                = 1
let g:ale_echo_msg_format            = '[%linter%]: %s'
let g:ale_enabled                    = 0
let g:ale_set_loclist                = 0
let g:ale_set_quickfix               = 1
let g:ale_set_signs                  = 0
let g:ctrlp_brief_prompt             = 1
let g:ctrlp_clear_cache_on_exit      = 0
let g:ctrlp_extensions               = [ 'buffertag', 'quickfix' ]
let g:ctrlp_prompt_mappings          = { 'PrtExit()': [ '<C-[>', '<Esc>', '<C-c>' ] }
let g:ctrlp_types                    = [ 'fil' ]
let g:fastfold_fold_command_suffixes = [ 'x' ]
let g:fastfold_savehook              = 0
let g:tagbar_compact                 = 1
let g:tagbar_sort                    = 0
let g:undotree_SetFocusWhenToggle    = 1
let g:vimspector_base_dir            = expand('$XDG_CONFIG_HOME/vimspector')
let g:vimspector_install_gadgets     = [ 'debugpy', 'vscode-cpptools' ]

let g:miniSnip_extends = {
      \ "arduino"  : [ "cpp", "c" ],
      \ "cpp"      : [ "c" ],
      \ "markdown" : [ "html" ],
      \ "tex"      : [ "plaintex" ],
      \ }


hi! link TagbarNestedKind Comment
hi! link TagbarType Comment

" STATUS LINE {{{1

set statusline=
set statusline+={%{NumOfBufs()}}       " Number of buffers
set statusline+=\ \                    " Separator
set statusline+=%f                     " Relative path to the file
set statusline+=\ \                    " Separator
set statusline+=%y                     " Filetype
set statusline+=[%{&ff}]               " File format
set statusline+=[%{FileEncoding()}]    " File encoding
set statusline+=\ \                    " Separator
set statusline+=[%{&fo}]               " Format options
set statusline+=\ \                    " Separator
set statusline+=[%{FileSize()}]        " File size
set statusline+=\ \                    " Separator
set statusline+=%r                     " Readonly flag
set statusline+=%{&ma\|\|&ro?'':'[-]'} " No modifiable flag
set statusline+=%w                     " Preview flag
set statusline+=\ \                    " Separator
set statusline+=%{ModifBufs()}         " Modified flag (extended)
set statusline+=%=                     " Switch to the right side
set statusline+=%{IssuesCount()}       " Count of errors, warnings
set statusline+=\ \                    " Separator
set statusline+=<0x%02B>               " Current char hex code
set statusline+=\ \                    " Separator
set statusline+=%l/                    " Current line
set statusline+=%L                     " Total lines
set statusline+=\ \:\ %c\              " Current column

" ### OTHER {{{1

augroup OTHER
  autocmd!

  " Open file at the last known position
  autocmd BufReadPost * if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit' | exe "normal! g`\"" | endif

  " Trim trailing whitespace
  autocmd BufWritePre * silent! undojoin | %s/\s\+$//e | %s/\(\n\r\?\)\+\%$//e

  " Set 'foldmethod' to 'syntax'
  autocmd FileType css,javascript,json,typescript,scss setlocal foldmethod=syntax

  " Automatically open QuickFix
  autocmd QuickFixCmdPost [^l]* nested cwindow
  autocmd QuickFixCmdPost    l* nested lwindow

  " Undo if filter shell command returned an error
  autocmd ShellFilterPost * if v:shell_error | undo | endif

  " If file has more lines than window height, then fold it
  autocmd BufReadPost * if line('$') > winheight(0) | setlocal fen | endif

augroup END

augroup TERMINAL_OPTIONS
  autocmd!

  execute 'autocmd '.(has("nvim") ? "TermOpen" : "TerminalOpen").' *
        \ let b:auto_insert = 1 | setlocal nonu stl=%f |
        \ au WinEnter <buffer> if b:auto_insert | sil! norm! i | endif'

  " Sanitize Neovim :terminal
  if has('nvim')
    autocmd TermOpen  * let b:term_job_finished = 0
    autocmd TermEnter * if  b:term_job_finished | call feedkeys("\<C-\>\<C-n>") | endif
    autocmd TermClose * let b:term_job_finished = 1 | call feedkeys("\<C-\>\<C-n>")
  endif

augroup END

let javaScript_fold = 1

runtime! vimrc.d/*.vim

set secure exrc
