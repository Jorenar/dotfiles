#!/usr/bin/env sh

# SPDX-License-Identifier: MIT
#  Copyright 2022 Jorengarenar

# -----------------------------------------------------------------------------

# global flags
classify=0
recursive=0
dereference=0
double_quote=0
multiple_dirs=0
no_dir_content=0

# `ls` arguments (listed here just as information)
opts=""
args=""
dirs=""
hide=""

# use `eval` to handle shell escapes
alias LS='eval "ls $opts $hide $args"'

# shell escape
esceval() {
    printf '%s\n' "$1" | sed "s/'/'\\\\''/g; 1 s/^/'/; $ s/$/'/"
}

# function to parse '.hidden' file
getHidden() {
    [ ! -f "$1"/.hidden ] && return
    while IFS= read -r line; do
        [ -n "$line" ] && printf -- ' --hide=%s' "$(esceval "$line")"
    done < "$1"/.hidden
}

# -----------------------------------------------------------------------------

# handle options
# {{{
while getopts "dFHLQR" opt 2> /dev/null; do
    case "$opt" in
        d)   no_dir_content=1 ;;
        F)   classify=1       ;;
        H|L) dereference=1    ;;
        Q)   double_quote=1   ;;
        R)   recursive=1      ;;
        *) ;;
    esac
done

for arg in "$@"; do
    case "$arg" in # long options
        "--classify"*)    classify=1        ;;
        "--recursive")    recursive=1       ;;
        "--dereference"*) dereference=1     ;;
        "--quote-name")   double_quote=1    ;;
        "--directory")    no_dir_content=1  ;;
    esac
    case "$arg" in # append options arguments
        "-"|"--") ;;
        "-"*) opts="$opts $arg" ;;
    esac
done

if [ "$no_dir_content" = 0 ] && [ "$classify" = 0 ]; then
    dereference=1
fi
# }}}

# handle files/dirs
for arg in "$@"; do
    file=0 # flag; treat as simple file

    if [ -f "$arg" ]; then
        file=1
    elif [ "$dereference" = 0 ] && [ -L "$arg" ]; then
        file=1
    elif [ -d "$arg" ] && [ "$no_dir_content" = 1 ]; then
        file=1
    elif [ -d "$arg" ]; then
        if [ -n "$dirs" ] || [ -n "$args" ]; then
            multiple_dirs=1
        fi
        dirs="$arg" # save directory name in case of listing only one
    fi

    if [ "$file" = 1 ]; then
        args="$args $(esceval "$arg")" # sanitize arguments for eval
    fi
done

# -----------------------------------------------------------------------------

# list just current/working directory
if [ -z "$args" ] && [ -z "$dirs" ]; then
    hide="$(getHidden .)"
    LS
fi

# list file(s) passed as CLI argument(s)
if [ -n "$args" ]; then
    LS
fi

# list one directory passed as CLI argument
if [ -n "$dirs" ] && [ "$multiple_dirs" = 0 ]; then
    args="$(esceval "$dirs")"
    hide="$(getHidden "$dirs")"
    LS
fi

# list multiple directories passed as CLI arguments
if [ -n "$dirs" ] && [ "$multiple_dirs" = 1 ]; then
    [ "$double_quote" = 1 ] && dq="-Q" || dq=

    for arg in "$@"; do
        case "$arg" in
            "-"?) continue ;; # discard options, were already handled
        esac

        if [ "$dereference" = 0 ] && [ -L "$arg" ]; then
            continue # treating symlink to dir as file, i.e. was already handled
        fi

        if [ -d "$arg" ]; then
            [ -n "$args" ] && echo # new line if already something listed above
            args="$(esceval "$arg")"
            hide="$(getHidden "$dirs")"

            # no need to display dir name when `-R` option passed
            [ "$recursive" = 0 ] && printf "%s:\n" "$(ls -d $dq "$arg")"

            LS
        fi
    done
fi
