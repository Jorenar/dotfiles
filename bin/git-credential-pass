#!/usr/bin/env sh

# SPDX-License-Identifier: MIT
# Copyright 2024 Jorenar

action=""
no_erase=false
passname=".git-credentials"

usage () {
    cat << EOF
usage: git credential-pass [<options>] <action>

    --pass-name    pass name to store credentials in
    --no-erase     disable erasing credentials

EOF
}

while [ "$#" -gt 0 ]; do
    case "$1" in
        get|store|erase)
            action="$1"
            ;;
        -h|--help)
            usage
            exit
            ;;
        --no-erase)
            no_erase=true
            ;;
        --pass-name)
            passname="$2"
            shift
            ;;
        --)
            ;;
        -?*)
            >&2 printf 'error: unknown switch: %s\n' "$1"
            usage
            exit 1
            ;;
        *)
            >&2 printf 'warning: ignoring unknown argument: %s\n' "$1"
            ;;
    esac
    shift
done

if [ -z "$action" ]; then
    usage
    exit
fi

TMPDIR="${TMPDIR:-/tmp}"
XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$(id -u)}"
PASSWORD_STORE_DIR="${PASSWORD_STORE_DIR:-"$HOME"/.password-store}"

if [ ! -d "$XDG_RUNTIME_DIR" ]; then
    XDG_RUNTIME_DIR="$TMPDIR/.$$"
    mkdir -p -m 0700 "$XDG_RUNTIME_DIR" || exit 1
fi

if [ "$action" = "get" ] && \
        [ ! -s "$PASSWORD_STORE_DIR/$passname.gpg" ]
then
    exit 0
fi

pipe="$XDG_RUNTIME_DIR/.$$.$(basename "$passname")"
mkfifo -m 0600 "$pipe"
trap '
    [ -e "$pipe" ] && rm "$pipe" && \
        [ "$XDG_RUNTIME_DIR" = "$TMPDIR/.$$" ] && \
            rmdir "$XDG_RUNTIME_DIR"
' EXIT HUP INT


pid=
if [ -s "$PASSWORD_STORE_DIR/$passname.gpg" ]; then
    pass show -- "$passname" > "$pipe" &
    pid="$!"
else
    echo > "$pipe" &
fi
git credential-store --file "$pipe" "$action"

if [ -n "$pid" ]; then
    wait "$pid"
    ret="$?"
    if [ "$ret" -ne 0 ]; then
        if [ -z "$GPG_TTY" ]; then
            # shellcheck disable=SC2016
            >&2 echo '# if pinentry did not launch, it might be because $GPG_TTY is empty'
        fi
        exit "$ret"
    fi
fi

if [ "$action" = "erase" ] && [ "$no_erase" = "true" ]; then
    exit
fi

case "$action" in
    store|erase)
        pass insert -mf -- "$passname" < "$pipe"
        ;;
esac
